type Sint = [ i32, z32, i64, z64 ];
type Uint = [ u32, v32, u64, v64 ];
type Int = [ Sint, Uint ];
type Float = [ f32, f64 ];
type Real = [ Float, decimal ];
type Number = [ Int, Real ];
type NotNull = [Number, string, error, array, datetime, duration];
type Primitive = [NotNull, null];
type PrimNoErr = [Number, string, array, datetime, duration, null];
type Log = [`Trace, `Debug, `Info, `Warn, `Error, `Stdout, `Stderr];
type Result<'r, 'e> = ['r, Error<'e>];
type Option<'a> = ['a, null];

type Pos = {
    line: i32,
    column: i32
};

type Source = [
    `File(string),
    `Netidx(string),
    `Internal(string),
    `Unspecified
];

type Ori = {
    parent: [Ori, null],
    source: Source,
    text: string
};

type ErrChain<'a> = {
    cause: [ErrChain<'a>, null],
    error: 'a,
    ori: Ori,
    pos: Pos
};

/// return the first argument when all arguments are equal, otherwise return nothing
pub let all = |@args| 'all;

/// return true if all arguments are true, otherwise return false
pub let and = |@args| 'and;

/// return the number of times x has updated
pub let count = |x| 'count;

/// return the first argument divided by all subsuquent arguments
pub let divide = |@args| 'divide;

/// return e only if e is an error
pub let filter_err = |e| 'filter_err;

/// return v if f(v) is true, otherwise return nothing
pub let filter = |v, f| 'filter;

/// return true if e is an error
pub let is_err = |e| 'is_err;

/// return e iff e is not an error, otherwise return nothing
pub let or_never = |e| 'or_never;

/// construct an error from the specified string
pub let error = |e| 'error;

/// return the maximum value of any argument
pub let max = |a, @args| 'max;

/// return the mean of the passed in arguments
pub let mean = |v, @args| 'mean;

/// return the minimum value of any argument
pub let min = |a, @args| 'min;

/// return v only once, subsuquent updates to v will be ignored
/// and once will return nothing
pub let once = |v| 'once;

/// seq will update j - i times, starting at i and ending at j - 1
pub let seq = |i, j| 'seq;

/// return true if any argument is true
pub let or = |@args| 'or;

/// return the product of all arguments
pub let product = |@args| 'product;

/// return the sum of all arguments
pub let sum = |@args| 'sum;

/// when v updates return v if the new value is different from the previous value,
/// otherwise return nothing.
pub let uniq = |v| 'uniq;

/// when v updates place it's value in an internal fifo queue. when clock updates
/// return the oldest value from the fifo queue. If clock updates and the queue is
/// empty, record the number of clock updates, and produce that number of
/// values from the queue when they are available.
pub let queue = |#clock, v| 'queue;

/// hold the most recent value of v interally until clock updates. If v updates
/// more than once before clock updates, older values of v will be discarded,
/// only the most recent value will be retained. If clock updates when no v is held
/// internall, record the number of times it updated, and pass that many v updates
/// through immediatly when they happen.
pub let hold = |#clock, v| 'hold;

/// ignore updates to any argument and never return anything
pub let never = |@args| 'never;

/// when v updates, return it, but also print it along
/// with the position of the expression to the specified sink
pub let dbg = |#dest: Log = `Stderr, v| 'dbg;

/// print a log message to stdout, stderr or the specified log level using the rust log
/// crate. Unlike dbg, log does not also return the value.
pub let log = |#dest: Log = `Stdout, msg| 'log;

/// print a raw value to stdout, stderr or the specified log level using the rust log
/// crate. Unlike dbg, log does not also return the value. Does not automatically insert
/// a newline and does not add the source module/location.
pub let print = |#dest: Log = `Stdout, msg| 'print;

/// print a raw value to stdout, stderr or the specified log level using the rust log
/// crate followed by a newline. Unlike dbg, log does not also return the value.
pub let println = |#dest: Log = `Stdout, msg| 'println;

/// Throttle v so it updates at most every #rate, where rate is a
/// duration (default 0.5 seconds). Intermediate updates that push v
/// over the #rate will be discarded. The most recent update will always
/// be delivered. If the sequence, m0, m1, ..., mN, arrives simultaneously
/// after a period of silence, first m0 will be delivered, then after the rate
/// timer expires mN will be delivered, m1, ..., m(N-1) will be discarded.
pub let throttle = |#rate = duration:0.5s, v| 'throttle
